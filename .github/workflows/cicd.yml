# 1 워크플로의 이름 지정
name: CI/CD with Gradle

# 2 워크플로가 시작될 조건 지정
on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest # 3 실행 환경 지정

    # Github 에 올라온 소스코드를 Actions 서버에 복사
    # 현재 커밋된 소스코드를 runner 환경에 다운로드(git clone 같은 역할)
    steps:
      - uses: actions/checkout@v3

    # JDK Setting
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      #Setting yml
      - name: make application.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml
          find src

    # gradlew chmod
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

    # Spring Boot Build
      - name: Spring Boot Build
        run: ./gradlew clean build -x test

    #------------------- Docker --------------------
      # Docker Image Build
      - name: Docker Image Build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }} .

      # DockerHub Login
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker Hub push
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}


          #------------------- EC2 --------------------

          # AWS EC2 Server Connect & Docker 명령어 실행
  deploy:
    needs: build
    runs-on : ubuntu-latest

    steps:
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 180s
          script: |
                   sudo docker stop ${{ secrets.DOCKERHUB_IMAGENAME }}
                   sudo docker rm ${{ secrets.DOCKERHUB_IMAGENAME }}
                   sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}
                   sudo docker run -it -d --network host --name ${{ secrets.DOCKERHUB_IMAGENAME }} -e TZ=Asia/Seoul ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}
